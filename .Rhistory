docs <- tm_map(docs, content_transformer(tolower))
# Remove numbers
docs <- tm_map(docs, removeNumbers)
# Remove stopwords for the language
docs <- tm_map(docs, removeWords, stopwords(lang))
# Remove punctuations
docs <- tm_map(docs, removePunctuation)
# Eliminate extra white spaces
docs <- tm_map(docs, stripWhitespace)
# Remove your own stopwords
if(!is.null(excludeWords))
docs <- tm_map(docs, removeWords, excludeWords)
# Text stemming
if(textStemming) docs <- tm_map(docs, stemDocument)
# Create term-document matrix
tdm <- TermDocumentMatrix(docs)
m <- as.matrix(tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v)
# check the color palette name
if(!colorPalette %in% rownames(brewer.pal.info)) colors = colorPalette
else colors = brewer.pal(8, colorPalette)
# Plot the word cloud
set.seed(1234)
wordcloud(d$word,d$freq, min.freq=min.freq, max.words=max.words,
random.order=FALSE, rot.per=0.35,
use.r.layout=FALSE, colors=colors)
invisible(list(tdm=tdm, freqTable = d))
}
#++++++++++++++++++++++
# Helper function
#++++++++++++++++++++++
# Download and parse webpage
html_to_text<-function(url){
library(RCurl)
library(XML)
# download html
html.doc <- getURL(url)
#convert to plain text
doc = htmlParse(html.doc, asText=TRUE)
# "//text()" returns all text outside of HTML tags.
# We also donâ€™t want text such as style and script codes
text <- xpathSApply(doc, "//text()[not(ancestor::script)][not(ancestor::style)][not(ancestor::noscript)][not(ancestor::form)]", xmlValue)
# Format text vector into one character string
return(paste(text, collapse = " "))
}
res<-rquery.wordcloud("JFKspeech.txt",
type ="file",
lang = "english")
x <- 1000
x  <- 1000 + 150
barplot(c(5,10,5))
barplot(c(3,10,3))
barplot(c(4,10,4))
barplot(c(4,10,4),col="skyblue")
barplot(c(4,10,4),col="blue")
barplot(c(4,10,4),col="skyblue")
pi,
c <- pi,
double(pi)
df <- data.frame(
a <- runif(20,5,10),
b <- runif(20,30,60),
c <- runif(20,50,100),
d <- runif (20, 100,200)
)
df
names(df)
letters
names(df) <- letters[1:4]
df
library(purrr)
map_dbl(df,function(df), sum(is.na(df))
map_dbl(df,function(df), sum(is.na(df)))
map_dbl(df,function(df) sum(is.na(df)))
map_dbl(df,function(df) sum(complete.cases(df)))
map_dbl(df,function(df) ">20"
)
map_dbl(df,function(df) >20)
map_dbl(df,function(df) df >20)
map_dbl(df,function(df) df >20 )
map_lgl(df,function(df) df >20 )
map_lgl(df,function(df) "df >20" )
map(df,function(df) "df >20" )
map(df,function(df) df >20 )
map(df,function(df) df >200 )
hist(df)
hist(df[,1:4])
df
hist(df[[1:4]])
hist(df[[1]])
hist(df[[1:4]])
hist(df)
hist(as.matrix(df))
hist(as.matrix(df),breaks = 20,col="skyblue")
apply(df,2,mean,trim=0.1)
apply(df,2,mean,trim=0.5)
apply(df,2,mean,trim=0.1)
apply(df,2,mean,trim=1)
apply(df,2,mean,)
apply(df,2,mean,100)
apply(df,2,mean,200)
apply(df,2,mean,trim=100)
apply(df,2,mean,trim=200)
apply(df,2,mean,trim=1)
apply(df,2,mean,trim=.9)
apply(df,2,sd,)
?sd
?sweep
df
plot(as.matrix(df))
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(z)
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
gato <- ls()
class(gato)
m <- matrix(c(1,5,2,6,3,7),nrow = 2)
m
t(m)
m==m
m+m
m %+% m
m %*% m
%>%
m%*%m
m %*% m
m
m <- t(m)
m %*%
m
m * m
m
x <- matrix(0,ncol=5)
y <- matrix(1,ncol=5)
x %*% y
colMeans(x)
colMeans(y)
x <- matrix(runif(64,30,2000))
x
x <- matrix(runif(64,30,2000),ncol=8)
x
x <- matrix(runif(25,30,2000),ncol=5)
x
colMeans(x)
colSums(A)
colSums()
colSums(X)
colSums(x)
install.packages(matlab)
install.packages("matlab")
library(Matrix)
## sed based correlation analisi
library(oro.nifti)
roi <- readNIfTI("PCC_thr75.nii.gz")
rm(list=ls())
## sed based correlation analisi
library(oro.nifti)
roi <- readNIfTI("PCC_thr75.nii.gz")
func <- readNIfTI("sub-00373_bandpassed_demeaned_filtered_antswarp_FWHM6.nii.gz")
## sed based correlation analisi
library(oro.nifti)
roi <- readNIfTI("PCC_thr75.nii.gz")
func <- readNIfTI("sub-00373_bandpassed_demeaned_filtered_antswarp_FWHM6.nii.gz")
orthographic(func)
func[func==0] <- NA
orthographic(func)
f <- matrix(func,ncol = d[4])
d <- dim(func)
f <- matrix(func,ncol = d[4])
t <- apply(f, 1,mean)
mask <- array(t,dim = d[1:3])
mask[mask!=0] <- 1
## draw mean time series frome roi
ts <- matrix(func[roi!=0],ncol= 200)
meants <- apply(ts,2,mean)
func_matrix <- matrix(func[mask!=0],ncol = 200)
corrtests <- apply(func_matrix,1,cor.test,meants)
pvalues <- sapply(corrtests,"[[",3)
pvalues <- 1 - pvalues
rvalues <- sapply(corrtests,"[[",4)
zvalues <- scale(rvalues)
zmap <- mask
zmap[zmap!=0] <- zvalues
zmap[zmap< 1.96] <- 0
zmap[zmap ==0] <- NA
pmap <- mask
pmap[pmap!=0] <- pvalues
pmap[pmap <0] <- 0
T1 <- readNIfTI("MNI152_T1_2mm_brain.nii.gz")
overlay(T1,zmap,z=50,plot.type="single")
corrtests <- apply(func_matrix,1,cor.test,meants)
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
overlay(T1,zmap,z=50:58,plot.type="single")
alumnos <- c("CARRIÓN RUIZ JOSÉ DAVID", "DEL ANGEL GARCIA JOSE GUADALUPE",
"DIAZ MORENO MIGUEL ANGEL","FRAUSTO GARCÍA SUCY",
"GARCIA CAMPOS MIGUEL ABRAHAM","GUERRA VARGAS MAURICIO",
"MATCHEL LIBREROS STEFAN","MENDOZA TREJO MARIA ISABEL",
"PADILLA LOPEZ ANGELICA","PELAEZ PEÑA TATIANA","PEREZ DIAZ TATIANA",
"RAMIREZ GARCIA ROSA MARIA","ROJO CASTAÑEDA BERENICE ALHELI",
"ROSAS VAZQUEZ RAUL","SALGADO YAÑEZ CARMEN VANESSA",
"VIDAL SILVA NOE","ZULOAGA BEDOYA LEIDY YULIANA")
alumnos
alumnos <- alumnos[nombres_aleatorios]
nombres_aleatorios <- sample(1:17,17,replace = F)
alumnos <- alumnos[nombres_aleatorios]
alumnos
numeros <- 1:17
sample1 <- sample(numeros,6,replace = F)
sample1
numeros <- numeros[-sample1]
sample2 <- sample(numeros,6,replace = F)
sample2
sample2_index <- numeric()
for( i in 1:6){
n_index <- which(numeros==sample2[i])
sample2_index[i] <- n_index
}
sample3 <- numeros[-sample2_index]
sample3
actividad1 <- list(equipo1,equipo2,equipo3)
names(actividad1) <- c("Equipo1","Equipo2","Equipo3")
equipo1 <- alumnos[sample1]
equipo2 <- alumnos[sample2]
equipo3 <- alumnos[sample3]
equipo1
equipo2
equipo3
sink("actividad1.txt")
actividad1
actividad1 <- list(equipo1,equipo2,equipo3)
names(actividad1) <- c("Equipo1","Equipo2","Equipo3")
sink("actividad1.txt")
actividad1
sink()
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
ls
View(spiderwide)
View(spiderwide)
attach(spiderwide)
mean(picture_adj)
mean(real_adj)
spiderlong <- read.csv("spiderlong.csv}",sep="\t")
spiderlong <- read.csv("spiderlong.cs",sep="\t")
spiderlong <- read.csv("spiderlong.csv",sep="\t")
View(spiderlong)
View(spiderlong)
lm(Anxiety ~ Group, data = spiderlong)
lm(Anxiety ~ Group, data = spiderlong)$Residuals
lm(Anxiety ~ Group, data = spiderlong)$residuals
lm(Anxiety ~ Group, data = spiderlong)$fitted.values
lm(Anxiety ~ Group, data = spiderlong)$residuals
summary(lm(Anxiety ~ Group, data = spiderlong))
library(pander)
summary(lm(Anxiety ~ Group, data = spiderlong))
t.test(Anxiety~Group,data= spiderlong)
t.test(picture_adj,real_adj,paired = T)
t.test(picture_adj,real_adj,paired = F)
t.test(picture_adj,real_adj)
t.test(picture_adj,real_adj)
t.test(Anxiety~Group,data= spiderlong)
t.test(Anxiety~Group,data= spiderlong,paired=T)
View(spiderlong)
View(spiderlong)
x1 <- mean(spiderlong$[spiderlong$Group=="Real Spider"])
x1 <- mean(spiderlong$Anxiety [spiderlong$Group=="Real Spider"])
x2 <- mean(spiderlong$Anxiety[spiderlong$Group=="Picture"])
sd1 <- sd(spiderlong$Anxiety [spiderlong$Group=="Real Spider"])
sd2 <- sd(spiderlong$Anxiety[spiderlong$Group=="Picture"])
n1 <- length(spiderlong$Group[spiderlong$Group =="Real Spider"])
n2 <- length(spiderlong$Group[spiderlong$Group =="Picture"])
n1
n2
x1
x2
s1
sd1
sd2
t <- (x1 - x2)/sqrt((sd1/n1 + sd2/n2))
t
t.test(Anxiety~Group,data=spiderlong)
t <- (x1 - x2)/sqrt((sd1^2/n1 + sd2^2/n2))
t
qt
t <- (x1 - x2)/sqrt((sd1^2/n1 + sd2^2/n2))
t.test(Anxiety~Group,data=spiderlong)
qt(p = 0.05,df = 21.385,lower.tail = F)
qt(p = 0.05,df = 21,lower.tail = F)
ttestfromMeans<-function(x1, x2, sd1, sd2, n1, n2)
{
df<-n1 + n2 - 2
poolvar<-(((n1-1)*sd1^2)+((n2-1)*sd2^2))/df
t<-(x1-x2)/sqrt(poolvar*((1/n1)+(1/n2)))
sig<-2*(1-(pt(abs(t),df)))
paste("t(df = ", df, ") = ", t, ", p = ", sig, sep = "")
}
ttestfromMeans()
ttestfromMeans(x1,x2,sd1,sd2,n1,n2)
pt(4,22)
pt(4,22,lower.tail = F)
pt(1.681345,22,lower.tail = F)
pt(-1.681345,22,lower.tail = F)
pt(abs(1.681345),22,lower.tail = F)
p
?p
sig<-2*(1-(pt(abs(t),df)))
t.test(Anxiety~Group,data=spiderlong)
t.test(Anxiety~Group,data=spiderlong,)
?t.test
t.test(Anxiety~Group,data=spiderlong,alternative="greater")
t.test(Anxiety~Group,data=spiderlong,alternative="less")
plot(Anxiety~Group,data = spiderlong)
plot(Anxiety~Group,data = spiderlong,col=c("red,green"))
plot(Anxiety~Group,data = spiderlong,col=c("red",green"))
)
)
plot(Anxiety~Group,data = spiderlong,col=c("red","green"))
hist(spiderlong)
hist(spiderlong$Anxiety)
ggplot(data=spiderlong,aes(x=Group,y=Anxiety))+
geom_boxplot()
geom_boxplot(notch = T)
ggplot(data=spiderlong,aes(x=Group,y=Anxiety))+
geom_boxplot(notch = T)
geom_boxplot(max=100)
ggplot(data=spiderlong,aes(x=Group,y=Anxiety))+
geom_boxplot(max=100)
?geom_boxplot
ggplot(data=spiderlong,aes(x=Group,y=Anxiety))+
geom_boxplot(ymax=100)
by(spiderlong$Anxiety,spiderlong$Group)
by(spiderlong$Anxiety,spiderlong$Group,summary)
lm(Anxiety~group)
lm(Anxiety~Group)
lm(Anxiety~Group,data=spiderlong)
summary(lm(Anxiety~Group,data=spiderlong))
aov(summary(lm(Anxiety~Group,data=spiderlong)))
aov(lm(Anxiety~Group,data=spiderlong))
summary(aov(lm(Anxiety~Group,data=spiderlong)))
summary(lm(Anxiety~Group,data=spiderlong))
summary(aov(lm(Anxiety~Group,data=spiderlong)))
rm(list=ls())
setwd("GitHub/data_science/")
#### learning to do t test with R. Andy Field data
library(tidyverse)
library(pander)
spiderwide <- read.csv("SpiderWide.csv",sep = "\t") %>%
mutate(pMean = (picture +real)/2 ) %>%
mutate(grandMean = mean(c(picture,real))) %>%
mutate(adj = grandMean - pMean)%>%
mutate (picture_adj = picture + adj)%>%
mutate(real_adj  = real+adj) %>%
select(picture_adj,real_adj)
dir()
cd ..
#### learning to do t test with R. Andy Field data
library(tidyverse)
library(pander)
spiderwide <- read.csv("SpiderWide.csv",sep = "\t") %>%
mutate(pMean = (picture +real)/2 ) %>%
mutate(grandMean = mean(c(picture,real))) %>%
mutate(adj = grandMean - pMean)%>%
mutate (picture_adj = picture + adj)%>%
mutate(real_adj  = real+adj) %>%
select(picture_adj,real_adj)
attach(spiderwide)
spiderlong <- read.csv("spiderlong.csv",sep="\t")
summary(lm(Anxiety ~ Group, data = spiderlong))
x1 <- mean(spiderlong$Anxiety [spiderlong$Group=="Real Spider"])
x2 <- mean(spiderlong$Anxiety[spiderlong$Group=="Picture"])
sd1 <- sd(spiderlong$Anxiety [spiderlong$Group=="Real Spider"])
sd2 <- sd(spiderlong$Anxiety[spiderlong$Group=="Picture"])
n1 <- length(spiderlong$Group[spiderlong$Group =="Real Spider"])
n2 <- length(spiderlong$Group[spiderlong$Group =="Picture"])
ttestfromMeans<-function(x1, x2, sd1, sd2, n1, n2)
{
df<-n1 + n2 - 2
poolvar<-(((n1-1)*sd1^2)+((n2-1)*sd2^2))/df
t<-(x1-x2)/sqrt(poolvar*((1/n1)+(1/n2)))
sig<-2*(1-(pt(abs(t),df)))
paste("t(df = ", df, ") = ", t, ", p = ", sig, sep = "")
}
library(sandwich)
yuen(spiderWide$real, spiderWide$picture)
library(WRS2)
yuen(spiderWide$real, spiderWide$picture)
#### learning to do t test with R. Andy Field data
library(tidyverse)
library(WRS2)
spiderWide <- read.csv("SpiderWide.csv",sep = "\t") %>%
mutate(pMean = (picture +real)/2 ) %>%
mutate(grandMean = mean(c(picture,real))) %>%
mutate(adj = grandMean - pMean)%>%
mutate (picture_adj = picture + adj)%>%
mutate(real_adj  = real+adj) %>%
select(picture_adj,real_adj)
rm(list=ls())
spiderWide <- read.csv("SpiderWide.csv",sep = "\t") %>%
mutate(pMean = (picture +real)/2 ) %>%
mutate(grandMean = mean(c(picture,real))) %>%
mutate(adj = grandMean - pMean)%>%
mutate (picture_adj = picture + adj)%>%
mutate(real_adj  = real+adj) %>%
select(picture_adj,real_adj)
source('~/GitHub/data_science/t_test_andyfield.R', echo=TRUE)
source('~/GitHub/data_science/t_test_andyfield.R', echo=TRUE)
source('~/GitHub/data_science/t_test_andyfield.R', echo=TRUE)
library(tidyverse)
library(WRS2)
spiderWide <- read.csv("SpiderWide.csv",sep = "\t") %>%
mutate(pMean = (picture +real)/2 ) %>%
mutate(grandMean = mean(c(picture,real))) %>%
mutate(adj = grandMean - pMean)%>%
mutate (picture_adj = picture + adj)%>%
mutate(real_adj  = real+adj) %>%
select(picture_adj,real_adj)
#### learning to do t test with R. Andy Field data
library(tidyverse)
library(WRS2)
spiderWide <- read.csv("SpiderWide.csv",sep = "\t") %>%
mutate(pMean = (picture +real)/2 ) %>%
mutate(grandMean = mean(c(picture,real))) %>%
mutate(adj = grandMean - pMean)%>%
mutate (picture_adj = picture + adj)%>%
mutate(real_adj  = real+adj) %>%
select(picture_adj,real_adj)
spiderWide <- read.csv("SpiderWide.csv",sep = "\t") %>%
mutate(pMean = (picture +real)/2 ) %>%
mutate(grandMean = mean(c(picture,real))) %>%
mutate(adj = grandMean - pMean)%>%
mutate (picture_adj = picture + adj)%>%
mutate(real_adj  = real+adj) %>%
select(picture_adj,real_adj)
attach(spiderWide)
spiderlong <- read.csv("spiderlong.csv",sep="\t")
summary(lm(Anxiety ~ Group, data = spiderlong))
x1 <- mean(spiderlong$Anxiety [spiderlong$Group=="Real Spider"])
x2 <- mean(spiderlong$Anxiety[spiderlong$Group=="Picture"])
sd1 <- sd(spiderlong$Anxiety [spiderlong$Group=="Real Spider"])
sd2 <- sd(spiderlong$Anxiety[spiderlong$Group=="Picture"])
n1 <- length(spiderlong$Group[spiderlong$Group =="Real Spider"])
n2 <- length(spiderlong$Group[spiderlong$Group =="Picture"])
ttestfromMeans<-function(x1, x2, sd1, sd2, n1, n2)
{
df<-n1 + n2 - 2
poolvar<-(((n1-1)*sd1^2)+((n2-1)*sd2^2))/df
t<-(x1-x2)/sqrt(poolvar*((1/n1)+(1/n2)))
sig<-2*(1-(pt(abs(t),df)))
paste("t(df = ", df, ") = ", t, ", p = ", sig, sep = "")
}
yuen(spiderWide$real, spiderWide$picture)
View(spiderWide)
View(spiderWide)
spiderWide
# Exploring T test through robust methods
detach(spiderWide)
spiderWide <- read.csv("SpiderWide.csv",sep = "\t")
yuen(spiderWide$real, spiderWide$picture)
spiderWide$real
spiderWide$picture
yuen(spiderWide$real, spiderWide$picture, tr = .1)
yuenbt(scores group 1, scores group 2, tr = .2, nboot = 599, alpha = .05,
side = F)
?yuen
yuen(Anxiety~Group,data= library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server))
yuen(Anxiety~Group,data=spiderlong)
yuen(Anxiety~Group,data=spiderlong,tr = 0.1)
yuen(Anxiety~Group,data=spiderlong,tr = 0.05)
t.test(Anxiety~Group,data=spiderlong)
yuenbt(Anxiety~Group,data = spiderlong,nboot = 100000)
yuenbt(Anxiety~Group,data = spiderlong,nboot = 10000)
install.packages("car"); install.packages("compute.es"); install.packages
("ggplot2"); install.packages("multcomp"); install.packages("pastecs"); install.
packages("reshape"); install.packages("WRS", repos="http://R-Forge.R-project.
org")
rm(list=ls())
