reminder(4,div = 2)
ls
remainder(4,div=2)
args(remainder)
args(corrplot)
library(corrplot)
args(corrplot)
args(boxplot)
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
swirl
library(swirl)
alfonso
swirl()
4
rm(list=ls())
swirl()
swirl()
head(flags)
dim(flags)
class(flgas)
class(flgs)
class(falgs)
class(flags)
lapply(flags,class)
cls_list <- lapply(flags, class)
cls_list
cls_list
(cls_list)
class(cls_list)
as.character(cls_list)
?sapply
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes. flag_shapes <- flags[, 19:23
flag_shapes. flag_shapes <- flags[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
sapply(flags_shape, function)
sapply(flags_shape,range)
sapply(flag_shape, function)
shape_mat <- sapply(flag_shape,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags,unique)
unique_vals
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals, function(elem) elem[2])
info()
bye()
swirl()
info()
main()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
submit()
source('~/GitHub/data_science/R_programming/rprog_scripts_submitscript3.R', echo=TRUE)
submit
submit()
x <<- 1
rm(list = ls())
x
x <<- 1
rm(x)
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(1:10)
makeVector(1:10)
rm(list=ls())
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
makeVector(10)
return_x <- function(x){ x <<- x; print(x)}
return_x(1)
return_x <- function(x){ x <- x; print(x)}
return_x(1)
rm(x)
return_x(1)
return_x <- function(x){ x <<- x; print(x)}
return_x(x)
return_x(3)
return_x(1:20)
x
rm(list=ls())
solve()
m <- matric(1:20,ncol=4)
m <- matrix(1:20,ncol=4)
m
solve(m)
m <- matrix(1:16,ncol=4)
solve(m)
1/m
1/20
solve(m)
solve
source('~/.active-rstudio-document', echo=TRUE)
makeVector(c(1,2,3))
a <- makeVector(c(1,2,3,4))
a
a$get()
a$setmean()
a$get()
a$getmean()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(a)
getmean()
a
a$set()
a$get()
mean(c(1,2,3,4))
cachemean(a)
a$set(c(10,20,30,40))
a$set()
a$set
a
a$get()
rm(m)
a
a$get()
a$getmean()
cachemean()
cachemean(a)
a$getmean()
a$setmean(c(1,2,3,4,2,4,2,1,2,2,1,3,3,1,2,1,3,3,5,3,6))
a$getmean(})
a$getmean()
a$setmean()
a$getmean()
a$set(c(1,2,5,3,4,2,4,3,6,5,6,4,76,4,34,34,))
a$set(c(1,2,5,3,4,2,4,3,6,5,6,4,76,4,34,34,2))
a$getmean()
cachemean(a)
a$getmean()
a$setmean()
cachemean(a)
x<--2
rm(x)
save.image()
rm(list=ls())
save.image()
source('~/.active-rstudio-document', echo=TRUE)
m <- matrix(1:16,ncol=4)
m
solve(m)
m <- matrix(1:4,ncol=2)
solve(m)
a <- makeVector(c(1,2,3,2))
a$get()
a$set()
ls(as.environment(makeVector()))
cachematrix <- NULL
source('~/GitHub/data_science/R_programming/ProgrammingAssignment2-master/cachematrix.R', echo=TRUE)
a <- makeCacheMatrix(matrix(1:4),ncol=2))
a <- makeCacheMatrix(matrix(1:4,ncol=2))
a
makeCacheMatrix <- function(x = matrix()) {
## set the value of the matrix
cache <- NULL
set <- function(y){
x <<- y
cache <- NULL
}
## get the value of the matrix
get <- function() x
## store inverted matrix
setmatrix <- function(inv) cache <<- inv
## print inverted matrix
getinv <- function()cache
## list of functions
list(set = set , get =get,
setmatrix=setmatrix,getinv=getinv)
}
a <- makeCacheMatrix(matrix(1:4,ncol=2))
a$setmatrix()
a$get()
a$getinv()
makeCacheMatrix <- function(x = matrix()) {
## set the value of the matrix
cache <- NULL
set <- function(y){
x <<- y
cache <- NULL
}
## get the value of the matrix
get <- function() x
## store inverted matrix
setmatrix <- function(inv) cache <<- inv
## print inverted matrix
getinv <- function()inv
## list of functions
list(set = set , get =get,
setmatrix=setmatrix,getinv=getinv)
}
makeCacheMatrix <- function(x = matrix()) {
## set the value of the matrix
cache <- NULL
set <- function(y){
x <<- y
cache <- NULL
}
## get the value of the matrix
get <- function() x
## store inverted matrix
setmatrix <- function(inv) cache <<- inv
## print inverted matrix
getinv <- function()inv
## list of functions
list(set = set , get =get,
setmatrix=setmatrix,getinv=getinv)
}
a <- makeCacheMatrix(matrix(1:4,ncol=2))
a$getinv()
getinv <- function()cache
a <- makeCacheMatrix(matrix(1:4,ncol=2))
a$getinv()
a$get()
a$getinv()
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(cache)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cacheSolve(a)
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
cacheSolve(a)
makeCacheMatrix <- function(x = matrix()) {
## set the value of the matrix
cache <- NULL
set <- function(y){
x <<- y
cache <- NULL
}
## get the value of the matrix
get <- function() x
## store inverted matrix
setinv <- function(inv) cache <<- inv
## print inverted matrix
getinv <- function()cache
## list of functions
list(set = set , get =get,
setmatrix=setmatrix,getinv=getinv)
}
a <- makeCacheMatrix(matrix(1:4,ncol=2))
list(set = set , get =get,
setinv=setinv,getinv=getinv)
makeCacheMatrix <- function(x = matrix()) {
## set the value of the matrix
cache <- NULL
set <- function(y){
x <<- y
cache <- NULL
}
## get the value of the matrix
get <- function() x
## store inverted matrix
setinv <- function(inv) cache <<- inv
## print inverted matrix
getinv <- function()cache
## list of functions
list(set = set , get =get,
setinv=setinv,getinv=getinv)
}
a <- makeCacheMatrix(matrix(1:4,ncol=2))
a$get()
a$getinv()
a$setinv()
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(cache)) {
message("getting cached data.")
return(cache)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
cacheSolve(A)
cacheSolve(a)
a
a$get()
cache
cacheSolve(a)
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data.")
return(cache)
}
data <- x$get()
inv <- solve(data)
x$setinv(inv)
inv
}
cacheSolve(a)
a <-  makeCacheMatrix(matrix(1:4,ncol=2))
a$get()
a$getinv()
cacheSolve(a)
source('~/GitHub/data_science/R_programming/ProgrammingAssignment2-master/cachematrix.R', echo=TRUE)
a$getinv()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
main()
?sample
sample(1:6,4,replace = 2)
sample(1:6,4,replace = T)
sample(1:6,1,replace = T)
sample(1:6,2,replace = T)
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
bye()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
ls
ls
rm(list=ls())
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
getwd()
setwd("GitHub/data_science/R_programming/")
ls()
ls
dir()
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
str(outcome)
names(outcome)
outcome$State
unique(outcome$State)
library(tidyverse)
library(tidyverse)
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
head(outcome)
## Read outcome data
data <- outcome %>%
filter(State==state)
#The function should use the following template.
#best <- function(state, outcome) {
state <- "SC"
## Read outcome data
data <- outcome %>%
filter(State==state)
data
str(data)
summary(data)
dim(data)
View(outcome)
View(outcome)
source('~/GitHub/data_science/R_programming/proggramming_assigment3.R', echo=TRUE)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character",
na.strings = "Not Available")
source('~/GitHub/data_science/R_programming/proggramming_assigment3.R', echo=TRUE)
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
source('~/GitHub/data_science/R_programming/proggramming_assigment3.R', echo=TRUE)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
## Check that state and outcome are valid
## For each state, find the hospital of the given rank
## Return a data frame with the hospital names and the
## (abbreviated) state name
outcomedata <- read.csv("outcome-of-care-measures.csv", colClasses = "character", na.strings="Not Available")
outcomeDataSet <- outcomedata[which(outcomedata$State==state),]
is_a_state <- is.element(state,outcomedata[,"State"])
if(!(is_a_state)){
stop ("invalid state")
}else{
if (outcome=="heart attack") {
a <- outcomeDataSet[[11]]
}
else if (outcome=="heart failure") {
a <- outcomeDataSet[[17]]
}
else if (outcome=="pneumonia") {
a <- outcomeDataSet[[23]]
}
else{
stop ("invalid outcome")
}
}
b <- as.numeric(a)
if (num == "best") {m <- min(b,na.rm=TRUE)
pos <- match(m,a)}
if (num == "worst") {m <- max(b,na.rm=TRUE)
pos <-match(m,a)}
else {
pos <- match((sort(b)[num]),a)
}
hospitalName <- outcomeDataSet[[2]][pos]
hospitalName
}
#rankhospital("TX", "heart failure", 4)
#rankhospital("MD", "heart attack", "worst")
#rankhospital("MN", "heart attack", 5000)
#rankhospital("NC", "heart attack", "worst")
rankhospital("NC", "heart attack", "worst")
source('~/GitHub/data_science/R_programming/proggramming_assigment3.R', echo=TRUE)
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
source('~/GitHub/data_science/R_programming/proggramming_assigment3.R', echo=TRUE)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
